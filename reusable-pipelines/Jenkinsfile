pipeline {
    agent any

    parameters {
        booleanParam(name: 'RC' , defaultValue: false, description: 'Is a release candidate?')
    }

    environment {
        VERSION="0.0.1"
        VERSION_RC="rc.2"
    }

    stages {

        stage('Audit tools') {
            steps {
                sh '''
                    git version
                    docker version
                    dotnet --list-sdks
                    dotnet --list-runtimes
                    ls -al
                '''
            }
        }

        stage('Build') {
            environment {
                //VERSION_SUFFIX = "${sh(script:'if [ "${RC}" == "false" ] ; then echo -n "${VERSION_RC}+ci.${BUILD_NUMBER}"; else echo -n "${VERSION_RC}"; fi', returnStdout: true)}"
                VERSION_SUFFIX = getVersionSuffix()
            }
            steps {
                echo "Building version ${VERSION} with suffix: ${VERSION_SUFFIX}"
                sh 'dotnet build -p:VersionPrefix="${VERSION}" --version-suffix "${VERSION_SUFFIX}" ./reusable-pipelines/src/Pi.Web/Pi.Web.csproj'
            }
        }

        stage('Test') {
            steps {
                dir('./reusable-pipelines/src') {
                   sh '''
                        dotnet test --logger "trx;LogFileName=Pi.Math.trx" Pi.Math.Tests/Pi.Math.Tests.csproj
                        dotnet test --logger "trx;LogFileName=Pi.Runtime.trx" Pi.Runtime.Tests/Pi.Runtime.Tests.csproj
                    '''
                    mstest testResultsFile:"**/*.trx", keepLongStdio: true 
                }
            }
        }

        stage('Smoke Test') {
            steps {
                sh 'dotnet ./reusable-pipelines/src/Pi.Web/bin/Debug/netcoreapp3.1/Pi.Web.dll'
            }
        }

        stage('Publish') {
            when {
                expression { return params.RC }
            }
            steps {
                sh 'dotnet publish -p:VersionPrefix="${VERSION}" --version-suffix "${VERSION_RC}" ./reusable-pipelines/src/Pi.Web/Pi.Web.csproj -o ./out'
                archiveArtifacts('out/')
            }
        }

    }
}


String getVersionSuffix() {
    if(param.RC) {
        return env.VESION_RC
    } else {
        return env.VERSION_RC + 'ci' + env.BUILD_NUMBER
    }
}

void auditTools() {
    sh '''
        git version
        docker version
        dotnet --list-sdks
        dotnet --list-runtimes
        ls -al
    '''
}